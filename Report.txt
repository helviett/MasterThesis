Меш -- это совокупность вершин, рёбер и граней, которые определяют форму объекта. Гранями в компьютерной графике являются треугольники.

Прежде чем объект попадет на экран, текстуру и меш отправляют на видеокарту. Для каждой вершины вызывается вершинный шейдер, затем полученные треугольники растеризиуются, далее для каждого пикселя вызывается пиксельный шейдер, в котором пиксель получает свой цвет (например, из текстуры). Полученные цвета пикселей смешиваются с цветом пикселей на экране.

В разработке игр применяют подходы, которые позволяет уменьшить количество отправлений данных на GPU. Например, текстурные атласы. Текстурный атлас -- это большое изображение, содержащее набор под-изображений. Это позволяет отрисовать множество объектов разом, если их текстуры находятся в одном атласе.



Целью данной работы является разработка методов оптимизации отрисовки в игре и уменьшение размера бандлов засчет генерации качественных текстурных мешей и последующей упаковкой полигональных текстур в атлас.


Для начала заметим, что объединение треугольников меша является набором простых полигонов с дырами, т.е. меш является триангуляцией набора полигонов, поэтому далее задача создания качественного меша сводится к обрамлению текстуры в полигон.




Контур растрового изображения это упорядоченное множество граничных пикселей и является наиболее точным обрамлением текстуры в полигон, то есть состоит из максимального количество вершин, но включает в себя минимальное количество прозрачных пикселей, для которых впустую отрабатывает пиксельный шейдер. Для нахождения контура изображения был реализован алгоритм Suzuki Satoshi.



Данный алгоритм не просто находит все контуры, но также составляет их иерархию и категоризирует на границы и дыры.




Алгоритм Satoshi подразумевает, что координаты пикселя являются его центром. Проблемы такого контура -- это наличие неразрешимых самопересечений и отсечений правых и нижних границ. Пример изображения с неразрешимым самопересечением представлен на слайде (красным выделено самопересечение).




На данном слайде представлен пример отсечения правых и нижних границ. Красным показаны посещенные алгоритмом пиксели, а зеленым UV координаты в пространстве атласа. На изображении справа представлен контур с желаемыми UV координатами. Для перехода от центров пикселей к вершинам был разработан алгоритм, который последовательно переходит от пикселя к пикселю по вершинам.






Контур изображения не подходит для отрисовки, т.к. содержит в себе слишком большое количество вершин. Поэтому контур необходимо аппроксимировать полигонами, являющимся надмножеством контура, что отличает данную задачу и предложенный алгоритм от алгоритмов упрощений кривой, которые используются в GIS системах. Разработанный алгоритм геометрическими преобразованиями последовательно удаляет вершины или сливает 2 полигона. Рассмотрим использующиеся преобразования:








Удаление вогнутого угла для границы и выпуклого угла для дыры.


Восстановление угла


Удаление треугольной дыры.





Каждое преобразование в алгоритме имеет свою стоимость, которая измеряется в добавочной площади.
В алгоритме используются 2 структуры данных для представления множества полигонов: дерево полигонов и триангуляция Делоне с ограничениями, которая используется для проверки корректности преобразований. Бинарное дерево поиска используется для поиска вершины с минимальной стоимостью преобразования. На каждом шаге алгоритм либо выполняет минимальное преобразование, либо сливает 2 полигона. Если не удается выполнить ни то, ни другое, либо было достигнуто условие выхода, то алгоритм останавливается. Расскажу подробнее о слиянии полигонов

Слияние полигонов позволяет продолжить аппроксимацию, если больше не осталось преобразований, или дать возможность произвести более дешевые преобразования, если на текущей итерации преобразования стали слишком дорогими. На данном слайде показан пример слияние дыры с границей и слияние двух границ


Автором был разработан оригинальный алгоритм для слияния полигонов, который находит точки слияния путем сопоставления полигонов видимости вершин. Полигон видимости для точки q -- это многоугольная область всех точек плоскости, видимых из точки q.


Полигон видимости находится при помощи алгоритма Triangular Expansion, который находит полигон видимости в триангуляции за O(nh), где h -- количество дыр. Запрос на нахождение точки в полигоне видимости можно выполнить за логарифм при помощи бинарного поиска. Псевдокод алгоритма представлен в раздаточном материале.



Т.к. одним из представлений множества полигонов является триангуляция Делоне с ограничениями, то меш изображения достается нам бесплатно. Достаточно запустить DFS по треугольникам и выбрать нужные. Ограниченные ребра являются либо входом, либо выходом из полигона.






Генетический алгоритм -- это эвристический алгоритм поиска, идея которого позаимствована из теории эволюции. В него входят этапы выбора родителей, скрещивания, мутации, оценки и отбора выживших.




Особь представляется в виде массива троек. Каждая тройка представляет X\Y координаты и угол поворота объекта вокруг центройда.
Также особь хранит в себе масив булевых флагов, которые обозначают принадлежность изображения к атласу. То есть мы имеем отношение одно ко многим. На одном изображении могут быть несколько разрозненных объектов.





Кратко расскажу про составные части генетического алгоритма.

Используются Creep и Reset мутации и одноточечный кроссовер.





Выбор родителей осуществляется с помощью Stochastic Universal Sampling с экспоненциальным ранжированием.





Отбор выживших является гибридом элитизма, замещения худших и старения. Под старением подразумевается, что особь не может прожить больше чем k поколений. Данные стратегии применяются указанном порядке.







Функция оценки является суммой с коэффициентами площади пересечения, площади отступов и площадью отсутствующих изображений.  Значение отступов хорошо показано на слайде.


Memetic algorithm -- Расширением классического генетического алгоритма, которое включает в себя процедуру локального поиска (или фазу обучения), которую проходят некоторые особи перед отбором. В данной работе используется симуляция физики. Локальный поиск позволяет драматически ускорить сходимость алгоритма.




Пример работы алгоритма представлен на слайде. Для полигональной упаковки достаточно одного атласа, в отличии от жадного алгоритма гильотины.

В рамках проделанной работы были исследованы алгоритмы аппроксимации и упаковки текстурных 2D мешей и выявлены их недостатки. На основе этих недостатков были реализованы оригинальные алгоритмы, которые улучшили качество упаковки атласов, что в свою очередь повысило производительность игр.

Все задачи, поставленные в ходе работы, выполнены успешно.

Алгоритмы были протестированы и внедрены в игровой движок с открытым исходным кодом <<Citrus>>, разрабатываемый игровой студией <<Game Forest>>, о чем свидетельствует полученный акт о внедрении.
